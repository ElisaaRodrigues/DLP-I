library ieee;
use ieee.std_logic_1164.all;

entity pedestre_final is
	
	port(
	
-------------|Entradas
		clk_50MHz, rst_in: in std_logic;
		botao_in: in std_logic;
		sensor_escuro_in: in std_logic;
		
-------------|Saidas dos leds da sinalizacao
		vd_c_out, am_c_out, vm_c_out : out std_logic;
		vd_p_out, vm_p_out: out std_logic;
		iluminacao_out : out std_logic
		
	);
	
	
end entity;

architecture projeto of pedestre_final is
	
	signal tipo_s : std_logic;  --------------------| 0 => Catodo comum   / 1 => Anodo comum
	signal clk_semaforo : std_logic;
	signal clk_display: std_logic;
	
-----------------------------------------|Declaracao dos componentes

component semaforo_pedestre is
	generic (tempo_min: natural := 60;
				tempo_ref: natural := 62;
				tempo_amarelo: natural := 4;
				tempo_verde: natural := 20);
	port(
		botao: in std_logic;
		vd_c, am_c, vm_c : out std_logic;
		vd_p, vm_p: out std_logic;
		iluminacao : out std_logic;
		sensor_escuro: in std_logic;
		saida_display: out std_logic;
		clk, rst: in std_logic
	);

end component;

component count_up is
	generic
	(Ncount : natural := 10);
	port
	(
		clk, rst : in std_logic;
		clk_out : out std_logic
	);

end component;

-------------------------------------------|

begin
	
	tipo_s <= '1';
	
	clk_semaforo : count_up 
	generic map (Ncount => 50000000)
	port map(
		clk => clk_50MHz,
		rst => rst_in,
		clk_out => clk_semaforo
		);

	comp_semaforo : semaforo_pedestre
	generic map(
		tempo_min => 60,
		tempo_ref => 62,
		tempo_amarelo => 4,
		tempo_verde => 20
	)
	port map(
		botao => botao_in,
		vd_c => vd_c_out,
		am_c => am_c_out, 
		vm_c => vm_c_out,
		vd_p => vd_p_out, 
		vm_p => vm_p_out,
		iluminacao => iluminacao_out,
		sensor_escuro => sensor_escuro_in,
		saida_display=> clk_display,
		clk => clk_semaforo, 
		rst => rst_in
	);
	
	
	


end architecture;